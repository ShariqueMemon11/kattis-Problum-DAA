                                    The Trip
A number of students are members of a club that travels annually to exotic 
locations. Their destinations in the past have included Indianapolis, Phoenix, 
Nashville, Philadelphia, San Jose, and Atlanta. This spring they are planning a 
trip to Eindhoven.

The group agrees in advance to share expenses equally, but it is not practical to 
have them share every expense as it occurs. So individuals in the group pay for 
particular things, like meals, hotels, taxi rides, plane tickets, etc. After the trip, 
each student‚Äôs expenses are tallied and money is exchanged so that the net cost 
to each is the same, to within one cent. In the past, this money exchange has 
been tedious and time consuming. Your job is to compute, from a list of 
expenses, the minimum amount of money that must change hands in order to 
equalize (within a cent) all the students‚Äô costs.

Input
Standard input will contain the information for several trips (at most 5). The 
information for each trip consists of a line containing a positive integer, ùëõ, the 
number of students on the trip, followed by ùëõ lines of input, each containing the 
amount, in dollars and cents (i.e., with exactly two digits after the decimal 
point), spent by a student. There are no more than 1000 students and no student 
spent more than $10000.00. A single line containing 0 follows the information 
for the last trip.

Output
For each trip, output a line stating the total amount of money, in dollars and 
cents, that must be exchanged to equalize the students‚Äô costs.
Sample Input 1 Sample Output 1
15.00
15.01
3.00
3.01
0 $11.99


1. Initialization of all variables lists and dictionaries that are used in 
this solution:
Alltrips: list is initialized as an empty list to store the data of all trips.
(max_trip=1): is initialized to 1, indicating the first trip.
(While max_trip! = 5): condition so max trips should be 5 as given in question
Initializing (trip_data) dictionary so we can store data of every trip in it
Initializing (overspent) and (underspent) dictionaries so we can sort trip members 
according to if they spent extra or less:
Initializing (Counter=0) variable to track how many members are there in a single 
trip and 


2. Member Data Input:

1st member
‚Ä¢ Prompt: "Enter Member name (or type 'done' to finish): "
‚Ä¢ Input: "Shariq"
‚Ä¢ Prompt: "Enter Expense: "
‚Ä¢ Input: 15.00
‚Ä¢ Add Shariq to trip_data['members']
Update trip_data['total_expense']
trip_data['total_expense'] += 15.00; total_expense = 15.00
Increment counter by 1 as 1st member is added to trip (counter=1)
trip_data['avg_expense_per_member'] = trip_data['total_expense'] / counter 
# avg_expense_per_member = 15.00 / 1 = 15.00

 2nd member
‚Ä¢ Prompt: "Enter Member name (or type 'done' to finish): "
‚Ä¢ Input: "Hamza"
‚Ä¢ Prompt: "Enter Expense: "
‚Ä¢ Input: 15.01
‚Ä¢ Add Hamza to trip_data['members']
Update trip_data['total_expense']
trip_data['total_expense'] += 15.01; total_expense = 15.00 + 15.01 = 30.01
Increment counter by 1 as 2nd member is added to trip (counter=2)
trip_data['avg_expense_per_member'] = trip_data['total_expense'] / counter 
# avg_expense_per_member = 30.01 / 2 = 15.005

3rd member
‚Ä¢ Prompt: "Enter Member name (or type 'done' to finish): "
‚Ä¢ Input: "Hashir"
‚Ä¢ Prompt: "Enter Expense: "
‚Ä¢ Input: 3.00
‚Ä¢ Add Hashir to trip_data['members']
Update trip_data['total_expense']
trip_data['total_expense'] += 3.00; total_expense = 30.01 + 3.00 = 33.01
Increment counter by 1 as 3
rd member is added to trip (counter=3)
trip_data['avg_expense_per_member'] = trip_data['total_expense'] / counter 
# avg_expense_per_member = 33.01 / 3 = 11.0033

4th member
‚Ä¢ Prompt: "Enter Member name (or type 'done' to finish): "
‚Ä¢ Input: "Raza"
‚Ä¢ Prompt: "Enter Expense: "
‚Ä¢ Input: 3.01
‚Ä¢ Add Raza to trip_data['members']
Update trip_data['total_expense']
trip_data['total_expense'] += 3.01; total_expense = 33.01 + 3.01 = 36.02
Increment counter by 1 as 4th member is added to trip (counter=4)
trip_data['avg_expense_per_member'] = trip_data['total_expense'] / counter 
# avg_expense_per_member = 36.02 / 4 = 9.005

3. Store Trip Data:
Append (trip_data) to the Alltrips list:
Prompt for entering data for the next trip. Assuming the user inputs "0", the loop 
ends

4. Sorting Members Based on Expenses:
Calculate the difference for each member:
member expense/avg_expense_per_member
‚Ä¢ Shariq: Expense = 15.00, Difference = 15.00 - 9.005 = 5.995
‚Ä¢ Hamza: Expense = 15.01, Difference = 15.01 - 9.005 = 6.005
‚Ä¢ Hashir: Expense = 3.00, Difference = 3.00 - 9.005 = - 6.005
‚Ä¢ Raza: Expense = 3.01, Difference = 3.01 - 9.005 = - 5.995
Append overspent members to (overspent list) and underspent members to 
(underspent list):
If member difference < 0
member data to (underspent list)
If member difference > 0
member data to (overspent list)
Sort overspent and underspent lists in descending order based on the difference:
overspent. append ({'Name': 'Hamza', 'Expense': 15.01, 'Difference': 6.005})
overspent. append ({'Name': 'Shariq', 'Expense': 15.00, 'Difference': 5.995})
underspent. append ({'Name': 'Hashir', 'Expense': 3.00, abs('Difference': 6.005)})
underspent. append ({'Name': 'Raza', 'Expense': 3.01, abs('Difference': 5.995)})

5. Redistribute Funds:
Initializing i and j for (underspent list) and (overspent list)
i = 0
j = 0
total exchanged = 0
First Iteration:
‚Ä¢ Extra_amount=min(underspent[i]['Difference'], overspent[j]['Difference'])
‚Ä¢ Adjust the differences for both members by subtracting 6.005
underspent[i]['Difference'] - = 6.005; Hashir's new Difference: 0
overspent[j]['Difference'] - = 6.005; Hamza's new Difference: 0
Increment both indices i and j to 1; i=1 j=1
total_exchanged += 6.005; total_exchanged = 6.005
Second Iteration:
‚Ä¢ Extra_amount=min(underspent[i]['Difference'], overspent[j]['Difference'])
‚Ä¢ Adjust the differences for both members by subtracting 5.993
underspent[i]['Difference'] -= 5.995; Raza's new Difference: 0
overspent[j]['Difference'] -= 5.995; Shariq's new Difference: 0
Increment both indices i and j to 1; i=2 j=2
total_exchanged += 5.995; total_exchanged = 6.005 + 5.995 = 11.999999999998

6. Final Output:
Iterate over each trip in Alltrips and print the results:
List of Members with their Expenses for each Trip:
Total Expense for Trip 1: 36.02
Name: Shariq, Expense: 15.00
Name: Hamza, Expense: 15.01
Name: Hashir, Expense: 3.00
Name: Raza, Expense: 3.01
Total amount that needs to be exchanged = $11.999999999998
